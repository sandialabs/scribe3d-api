// Your licence file C:\Users\tgnoel\Documents\ReversePOCO.txt has expired.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace GSAS_Web.Data
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IGSAS_Data : IDisposable
    {
        DbSet<Request> Requests { get; set; } // Request
        DbSet<RequestTool> RequestTools { get; set; } // RequestTools
        DbSet<ScribeMessage> ScribeMessages { get; set; } // ScribeMessage
        DbSet<ScribeProposedChange> ScribeProposedChanges { get; set; } // ScribeProposedChange
        DbSet<ScribeSession> ScribeSessions { get; set; } // ScribeSession
        DbSet<Tool> Tools { get; set; } // Tool
        DbSet<ToolFile> ToolFiles { get; set; } // ToolFile
        DbSet<UserTool> UserTools { get; set; } // UserTools

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int AspnetAnyDataInTables(int? tablesToCheck);
        // AspnetAnyDataInTablesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetApplicationsCreateApplication(string applicationName, out Guid? applicationId);
        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion);
        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer);
        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, DateTime? currentTimeUtc, DateTime? createDate, int? uniqueEmail, int? passwordFormat, out Guid? userId);
        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize);
        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize);
        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetAllUsers(string applicationName, int? pageIndex, int? pageSize);
        // AspnetMembershipGetAllUsersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetNumberOfUsersOnline(string applicationName, int? minutesSinceLastInActive, DateTime? currentTimeUtc);
        // AspnetMembershipGetNumberOfUsersOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, DateTime? currentTimeUtc, string passwordAnswer);
        // AspnetMembershipGetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class GSAS_Data : DbContext, IGSAS_Data
    {
        public GSAS_Data()
        {
        }

        public GSAS_Data(DbContextOptions<GSAS_Data> options)
            : base(options)
        {
        }

        public DbSet<Request> Requests { get; set; } // Request
        public DbSet<RequestTool> RequestTools { get; set; } // RequestTools
        public DbSet<ScribeMessage> ScribeMessages { get; set; } // ScribeMessage
        public DbSet<ScribeProposedChange> ScribeProposedChanges { get; set; } // ScribeProposedChange
        public DbSet<ScribeSession> ScribeSessions { get; set; } // ScribeSession
        public DbSet<Tool> Tools { get; set; } // Tool
        public DbSet<ToolFile> ToolFiles { get; set; } // ToolFile
        public DbSet<UserTool> UserTools { get; set; } // UserTools

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=S1038975\TODDSERVER;Initial Catalog=GSAS_Data;Integrated Security=True;MultipleActiveResultSets=True;Application Name=EntityFramework");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new RequestConfiguration());
            modelBuilder.ApplyConfiguration(new RequestToolConfiguration());
            modelBuilder.ApplyConfiguration(new ScribeMessageConfiguration());
            modelBuilder.ApplyConfiguration(new ScribeProposedChangeConfiguration());
            modelBuilder.ApplyConfiguration(new ScribeSessionConfiguration());
            modelBuilder.ApplyConfiguration(new ToolConfiguration());
            modelBuilder.ApplyConfiguration(new ToolFileConfiguration());
            modelBuilder.ApplyConfiguration(new UserToolConfiguration());

        }


        // Stored Procedures
        public int AspnetAnyDataInTables(int? tablesToCheck)
        {
            var tablesToCheckParam = new SqlParameter { ParameterName = "@TablesToCheck", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = tablesToCheck.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tablesToCheck.HasValue)
                tablesToCheckParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_AnyDataInTables] @TablesToCheck", tablesToCheckParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetAnyDataInTablesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetApplicationsCreateApplication(string applicationName, out Guid? applicationId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Applications_CreateApplication] @ApplicationName, @ApplicationId OUTPUT", applicationNameParam, applicationIdParam, procResultParam);

            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (Guid) applicationIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParam = new SqlParameter { ParameterName = "@Feature", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = feature, Size = 128 };
            if (featureParam.Value == null)
                featureParam.Value = DBNull.Value;

            var compatibleSchemaVersionParam = new SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = compatibleSchemaVersion, Size = 128 };
            if (compatibleSchemaVersionParam.Value == null)
                compatibleSchemaVersionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_CheckSchemaVersion] @Feature, @CompatibleSchemaVersion", featureParam, compatibleSchemaVersionParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = DBNull.Value;

            var newPasswordQuestionParam = new SqlParameter { ParameterName = "@NewPasswordQuestion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = newPasswordQuestion, Size = 256 };
            if (newPasswordQuestionParam.Value == null)
                newPasswordQuestionParam.Value = DBNull.Value;

            var newPasswordAnswerParam = new SqlParameter { ParameterName = "@NewPasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = newPasswordAnswer, Size = 128 };
            if (newPasswordAnswerParam.Value == null)
                newPasswordAnswerParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] @ApplicationName, @UserName, @NewPasswordQuestion, @NewPasswordAnswer", applicationNameParam, userNameParam, newPasswordQuestionParam, newPasswordAnswerParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, DateTime? currentTimeUtc, DateTime? createDate, int? uniqueEmail, int? passwordFormat, out Guid? userId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = DBNull.Value;

            var passwordParam = new SqlParameter { ParameterName = "@Password", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = password, Size = 128 };
            if (passwordParam.Value == null)
                passwordParam.Value = DBNull.Value;

            var passwordSaltParam = new SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordSalt, Size = 128 };
            if (passwordSaltParam.Value == null)
                passwordSaltParam.Value = DBNull.Value;

            var emailParam = new SqlParameter { ParameterName = "@Email", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = DBNull.Value;

            var passwordQuestionParam = new SqlParameter { ParameterName = "@PasswordQuestion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordQuestion, Size = 256 };
            if (passwordQuestionParam.Value == null)
                passwordQuestionParam.Value = DBNull.Value;

            var passwordAnswerParam = new SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = DBNull.Value;

            var isApprovedParam = new SqlParameter { ParameterName = "@IsApproved", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isApproved.GetValueOrDefault() };
            if (!isApproved.HasValue)
                isApprovedParam.Value = DBNull.Value;

            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = DBNull.Value;

            var createDateParam = new SqlParameter { ParameterName = "@CreateDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = createDate.GetValueOrDefault() };
            if (!createDate.HasValue)
                createDateParam.Value = DBNull.Value;

            var uniqueEmailParam = new SqlParameter { ParameterName = "@UniqueEmail", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = uniqueEmail.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!uniqueEmail.HasValue)
                uniqueEmailParam.Value = DBNull.Value;

            var passwordFormatParam = new SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = passwordFormat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordFormat.HasValue)
                passwordFormatParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_CreateUser] @ApplicationName, @UserName, @Password, @PasswordSalt, @Email, @PasswordQuestion, @PasswordAnswer, @IsApproved, @CurrentTimeUtc, @CreateDate, @UniqueEmail, @PasswordFormat, @UserId OUTPUT", applicationNameParam, userNameParam, passwordParam, passwordSaltParam, emailParam, passwordQuestionParam, passwordAnswerParam, isApprovedParam, currentTimeUtcParam, createDateParam, uniqueEmailParam, passwordFormatParam, userIdParam, procResultParam);

            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (Guid) userIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var emailToMatchParam = new SqlParameter { ParameterName = "@EmailToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = emailToMatch, Size = 256 };
            if (emailToMatchParam.Value == null)
                emailToMatchParam.Value = DBNull.Value;

            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByEmail] @ApplicationName, @EmailToMatch, @PageIndex, @PageSize", applicationNameParam, emailToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameToMatchParam = new SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userNameToMatch, Size = 256 };
            if (userNameToMatchParam.Value == null)
                userNameToMatchParam.Value = DBNull.Value;

            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByName] @ApplicationName, @UserNameToMatch, @PageIndex, @PageSize", applicationNameParam, userNameToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetAllUsers(string applicationName, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_GetAllUsers] @ApplicationName, @PageIndex, @PageSize", applicationNameParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipGetAllUsersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetNumberOfUsersOnline(string applicationName, int? minutesSinceLastInActive, DateTime? currentTimeUtc)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var minutesSinceLastInActiveParam = new SqlParameter { ParameterName = "@MinutesSinceLastInActive", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minutesSinceLastInActive.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minutesSinceLastInActive.HasValue)
                minutesSinceLastInActiveParam.Value = DBNull.Value;

            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_GetNumberOfUsersOnline] @ApplicationName, @MinutesSinceLastInActive, @CurrentTimeUtc", applicationNameParam, minutesSinceLastInActiveParam, currentTimeUtcParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipGetNumberOfUsersOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, DateTime? currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = DBNull.Value;

            var maxInvalidPasswordAttemptsParam = new SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxInvalidPasswordAttempts.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxInvalidPasswordAttempts.HasValue)
                maxInvalidPasswordAttemptsParam.Value = DBNull.Value;

            var passwordAttemptWindowParam = new SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = passwordAttemptWindow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordAttemptWindow.HasValue)
                passwordAttemptWindowParam.Value = DBNull.Value;

            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = DBNull.Value;

            var passwordAnswerParam = new SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[aspnet_Membership_GetPassword] @ApplicationName, @UserName, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @CurrentTimeUtc, @PasswordAnswer", applicationNameParam, userNameParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, currentTimeUtcParam, passwordAnswerParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipGetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class GSAS_DataFactory : IDesignTimeDbContextFactory<GSAS_Data>
    {
        public GSAS_Data CreateDbContext(string[] args)
        {
            return new GSAS_Data();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeGSAS_Data : IGSAS_Data
    {
        public DbSet<Request> Requests { get; set; } // Request
        public DbSet<RequestTool> RequestTools { get; set; } // RequestTools
        public DbSet<ScribeMessage> ScribeMessages { get; set; } // ScribeMessage
        public DbSet<ScribeProposedChange> ScribeProposedChanges { get; set; } // ScribeProposedChange
        public DbSet<ScribeSession> ScribeSessions { get; set; } // ScribeSession
        public DbSet<Tool> Tools { get; set; } // Tool
        public DbSet<ToolFile> ToolFiles { get; set; } // ToolFile
        public DbSet<UserTool> UserTools { get; set; } // UserTools

        public FakeGSAS_Data()
        {
            _database = null;

            Requests = new FakeDbSet<Request>("Id");
            RequestTools = new FakeDbSet<RequestTool>("Id");
            ScribeMessages = new FakeDbSet<ScribeMessage>("Id");
            ScribeProposedChanges = new FakeDbSet<ScribeProposedChange>("Id");
            ScribeSessions = new FakeDbSet<ScribeSession>("Id");
            Tools = new FakeDbSet<Tool>("Id");
            ToolFiles = new FakeDbSet<ToolFile>("Id");
            UserTools = new FakeDbSet<UserTool>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int AspnetAnyDataInTables(int? tablesToCheck)
        {
            return 0;
        }

        // AspnetAnyDataInTablesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetApplicationsCreateApplication(string applicationName, out Guid? applicationId)
        {
            applicationId = default(Guid);
            return 0;
        }

        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            return 0;
        }

        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            return 0;
        }

        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, DateTime? currentTimeUtc, DateTime? createDate, int? uniqueEmail, int? passwordFormat, out Guid? userId)
        {
            userId = default(Guid);
            return 0;
        }

        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize)
        {
            return 0;
        }

        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize)
        {
            return 0;
        }

        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetAllUsers(string applicationName, int? pageIndex, int? pageSize)
        {
            return 0;
        }

        // AspnetMembershipGetAllUsersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetNumberOfUsersOnline(string applicationName, int? minutesSinceLastInActive, DateTime? currentTimeUtc)
        {
            return 0;
        }

        // AspnetMembershipGetNumberOfUsersOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, DateTime? currentTimeUtc, string passwordAnswer)
        {
            return 0;
        }

        // AspnetMembershipGetPasswordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Request
    public class Request
    {
        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email (length: 256)
        public string FirstName { get; set; } // FirstName (length: 256)
        public string LastName { get; set; } // LastName (length: 256)
        public bool RequestGranted { get; set; } // RequestGranted
        public DateTimeOffset? RequestDate { get; set; } // RequestDate
        public bool RequestDenied { get; set; } // RequestDenied
        public string GrantedByUser { get; set; } // GrantedByUser (length: 256)
        public string Country { get; set; } // Country (length: 50)
        public string Phone { get; set; } // Phone (length: 50)
        public string Organization { get; set; } // Organization (length: 150)
        public string Address { get; set; } // Address (length: 300)
        public string CompanyType { get; set; } // CompanyType (length: 100)
        public string Position { get; set; } // Position (length: 100)
        public bool HasAuthority { get; set; } // HasAuthority
        public string UserCount { get; set; } // UserCount (length: 50)
        public string Purpose { get; set; } // Purpose (length: 400)
        public string Comments { get; set; } // Comments (length: 400)
        public bool HasNonUsUsers { get; set; } // HasNonUSUsers
        public DateTimeOffset? CompleteDate { get; set; } // CompleteDate
        public string CompletionNotes { get; set; } // CompletionNotes (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child RequestTools where [RequestTools].[RequestId] point to this entity (FK_RequestTools_Request)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ICollection<RequestTool> RequestTools { get; set; } // RequestTools.FK_RequestTools_Request

        public Request()
        {
            RequestTools = new List<RequestTool>();
        }
    }

    // RequestTools
    public class RequestTool
    {
        public int Id { get; set; } // Id (Primary key)
        public int RequestId { get; set; } // RequestId
        public int ToolId { get; set; } // ToolId

        // Foreign keys

        /// <summary>
        /// Parent Request pointed by [RequestTools].([RequestId]) (FK_RequestTools_Request)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual Request Request { get; set; } // FK_RequestTools_Request

        /// <summary>
        /// Parent Tool pointed by [RequestTools].([ToolId]) (FK_RequestTools_Tool)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual Tool Tool { get; set; } // FK_RequestTools_Tool
    }

    // ScribeMessage
    public class ScribeMessage
    {
        public int Id { get; set; } // Id (Primary key)
        public string FromTeam { get; set; } // FromTeam (length: 50)
        public string ToTeam { get; set; } // ToTeam (length: 50)
        public string Message { get; set; } // Message (length: 500)
        public DateTimeOffset TimeSent { get; set; } // TimeSent
        public int SessionId { get; set; } // SessionId

        // Foreign keys

        /// <summary>
        /// Parent ScribeSession pointed by [ScribeMessage].([SessionId]) (FK_ScribeMessage_ScribeSession)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ScribeSession ScribeSession { get; set; } // FK_ScribeMessage_ScribeSession
    }

    // ScribeProposedChange
    public class ScribeProposedChange
    {
        public int Id { get; set; } // Id (Primary key)
        public int SessionId { get; set; } // SessionId
        public string Team { get; set; } // Team (length: 50)
        public string ScribeSaveFile { get; set; } // ScribeSaveFile
        public bool IsApproved { get; set; } // IsApproved
        public double? ApproveUpTo { get; set; } // ApproveUpTo
        public string Description { get; set; } // Description (length: 500)
        public bool IsDenied { get; set; } // IsDenied
        public string HostMessage { get; set; } // HostMessage (length: 500)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) ScribeProposedChange pointed by [ScribeProposedChange].[Id] (FK_ScribeProposedChange_ScribeProposedChange)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ScribeProposedChange ScribeProposedChange2 { get; set; } // ScribeProposedChange.FK_ScribeProposedChange_ScribeProposedChange

        // Foreign keys

        /// <summary>
        /// Parent ScribeProposedChange pointed by [ScribeProposedChange].([Id]) (FK_ScribeProposedChange_ScribeProposedChange)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ScribeProposedChange ScribeProposedChange1 { get; set; } // FK_ScribeProposedChange_ScribeProposedChange

        public ScribeProposedChange()
        {
            IsApproved = false;
            IsDenied = false;
        }
    }

    // ScribeSession
    public class ScribeSession
    {
        public int Id { get; set; } // Id (Primary key)
        public string SessionName { get; set; } // SessionName (length: 50)
        public string HostId { get; set; } // HostId (length: 50)
        public double? GameTime { get; set; } // GameTime
        public double? PlaySpeed { get; set; } // PlaySpeed
        public int SaveFileId { get; set; } // SaveFileId
        public string SaveFile { get; set; } // SaveFile
        public string CurrentTeam { get; set; } // CurrentTeam (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public bool IsActive { get; set; } // IsActive
        public DateTimeOffset CreateDate { get; set; } // CreateDate
        public double TurnTime { get; set; } // TurnTime

        // Reverse navigation

        /// <summary>
        /// Child ScribeMessages where [ScribeMessage].[SessionId] point to this entity (FK_ScribeMessage_ScribeSession)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ICollection<ScribeMessage> ScribeMessages { get; set; } // ScribeMessage.FK_ScribeMessage_ScribeSession

        public ScribeSession()
        {
            GameTime = 0;
            PlaySpeed = 0;
            SaveFileId = 0;
            CurrentTeam = "white";
            IsActive = true;
            TurnTime = 0;
            ScribeMessages = new List<ScribeMessage>();
        }
    }

    // Tool
    public class Tool
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Description { get; set; } // Description
        public int? ParentToolId { get; set; } // ParentToolId
        public bool IsDeleted { get; set; } // IsDeleted
        public bool IsMainTool { get; set; } // IsMainTool

        // Reverse navigation

        /// <summary>
        /// Child RequestTools where [RequestTools].[ToolId] point to this entity (FK_RequestTools_Tool)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ICollection<RequestTool> RequestTools { get; set; } // RequestTools.FK_RequestTools_Tool

        /// <summary>
        /// Child ToolFiles where [ToolFile].[ToolId] point to this entity (FK_File_Tool)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ICollection<ToolFile> ToolFiles { get; set; } // ToolFile.FK_File_Tool

        /// <summary>
        /// Child UserTools where [UserTools].[ToolId] point to this entity (FK_UserTools_UserTools)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual ICollection<UserTool> UserTools { get; set; } // UserTools.FK_UserTools_UserTools

        public Tool()
        {
            IsDeleted = false;
            IsMainTool = false;
            RequestTools = new List<RequestTool>();
            ToolFiles = new List<ToolFile>();
            UserTools = new List<UserTool>();
        }
    }

    // ToolFile
    public class ToolFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string MimeType { get; set; } // MimeType (length: 200)
        public DateTimeOffset DateAdded { get; set; } // DateAdded
        public bool IsDeleted { get; set; } // IsDeleted
        public int ToolId { get; set; } // ToolId
        public int ToolFileType { get; set; } // ToolFileType
        public string FileName { get; set; } // FileName (length: 200)
        public string Description { get; set; } // Description (length: 500)
        public string FileHash { get; set; } // FileHash (length: 1000)
        public bool IsArchived { get; set; } // IsArchived
        public DateTimeOffset? ArchiveDate { get; set; } // ArchiveDate

        // Foreign keys

        /// <summary>
        /// Parent Tool pointed by [ToolFile].([ToolId]) (FK_File_Tool)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual Tool Tool { get; set; } // FK_File_Tool

        public ToolFile()
        {
            IsDeleted = false;
            ToolFileType = 1;
            IsArchived = false;
        }
    }

    // UserTools
    public class UserTool
    {
        public int Id { get; set; } // Id (Primary key)
        public string UserName { get; set; } // UserName (length: 256)
        public int ToolId { get; set; } // ToolId

        // Foreign keys

        /// <summary>
        /// Parent Tool pointed by [UserTools].([ToolId]) (FK_UserTools_UserTools)
        /// </summary>
        [JsonIgnore]
        [NotMapped]
        public virtual Tool Tool { get; set; } // FK_UserTools_UserTools
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Request
    public class RequestConfiguration : IEntityTypeConfiguration<Request>
    {
        public void Configure(EntityTypeBuilder<Request> builder)
        {
            builder.ToTable("Request", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Request").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.RequestGranted).HasColumnName(@"RequestGranted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RequestDate).HasColumnName(@"RequestDate").HasColumnType("datetimeoffset").IsRequired(false);
            builder.Property(x => x.RequestDenied).HasColumnName(@"RequestDenied").HasColumnType("bit").IsRequired();
            builder.Property(x => x.GrantedByUser).HasColumnName(@"GrantedByUser").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Organization).HasColumnName(@"Organization").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar(300)").IsRequired(false).IsUnicode(false).HasMaxLength(300);
            builder.Property(x => x.CompanyType).HasColumnName(@"CompanyType").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.HasAuthority).HasColumnName(@"HasAuthority").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UserCount).HasColumnName(@"UserCount").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Purpose).HasColumnName(@"Purpose").HasColumnType("varchar(400)").IsRequired(false).IsUnicode(false).HasMaxLength(400);
            builder.Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType("varchar(400)").IsRequired(false).IsUnicode(false).HasMaxLength(400);
            builder.Property(x => x.HasNonUsUsers).HasColumnName(@"HasNonUSUsers").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CompleteDate).HasColumnName(@"CompleteDate").HasColumnType("datetimeoffset").IsRequired(false);
            builder.Property(x => x.CompletionNotes).HasColumnName(@"CompletionNotes").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
        }
    }

    // RequestTools
    public class RequestToolConfiguration : IEntityTypeConfiguration<RequestTool>
    {
        public void Configure(EntityTypeBuilder<RequestTool> builder)
        {
            builder.ToTable("RequestTools", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_RequestTools").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RequestId).HasColumnName(@"RequestId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ToolId).HasColumnName(@"ToolId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Request).WithMany(b => b.RequestTools).HasForeignKey(c => c.RequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RequestTools_Request");
            builder.HasOne(a => a.Tool).WithMany(b => b.RequestTools).HasForeignKey(c => c.ToolId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RequestTools_Tool");
        }
    }

    // ScribeMessage
    public class ScribeMessageConfiguration : IEntityTypeConfiguration<ScribeMessage>
    {
        public void Configure(EntityTypeBuilder<ScribeMessage> builder)
        {
            builder.ToTable("ScribeMessage", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_ScribeMessage").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FromTeam).HasColumnName(@"FromTeam").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ToTeam).HasColumnName(@"ToTeam").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar(500)").IsRequired().IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.TimeSent).HasColumnName(@"TimeSent").HasColumnType("datetimeoffset").IsRequired();
            builder.Property(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.ScribeSession).WithMany(b => b.ScribeMessages).HasForeignKey(c => c.SessionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ScribeMessage_ScribeSession");
        }
    }

    // ScribeProposedChange
    public class ScribeProposedChangeConfiguration : IEntityTypeConfiguration<ScribeProposedChange>
    {
        public void Configure(EntityTypeBuilder<ScribeProposedChange> builder)
        {
            builder.ToTable("ScribeProposedChange", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_ScribeProposedChange").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Team).HasColumnName(@"Team").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ScribeSaveFile).HasColumnName(@"ScribeSaveFile").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            builder.Property(x => x.IsApproved).HasColumnName(@"IsApproved").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ApproveUpTo).HasColumnName(@"ApproveUpTo").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.IsDenied).HasColumnName(@"IsDenied").HasColumnType("bit").IsRequired();
            builder.Property(x => x.HostMessage).HasColumnName(@"HostMessage").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.ScribeProposedChange1).WithOne(b => b.ScribeProposedChange2).HasForeignKey<ScribeProposedChange>(c => c.Id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ScribeProposedChange_ScribeProposedChange");
        }
    }

    // ScribeSession
    public class ScribeSessionConfiguration : IEntityTypeConfiguration<ScribeSession>
    {
        public void Configure(EntityTypeBuilder<ScribeSession> builder)
        {
            builder.ToTable("ScribeSession", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_ScribeSession").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.HostId).HasColumnName(@"HostId").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.GameTime).HasColumnName(@"GameTime").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PlaySpeed).HasColumnName(@"PlaySpeed").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.SaveFileId).HasColumnName(@"SaveFileId").HasColumnType("int").IsRequired();
            builder.Property(x => x.SaveFile).HasColumnName(@"SaveFile").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            builder.Property(x => x.CurrentTeam).HasColumnName(@"CurrentTeam").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetimeoffset").IsRequired();
            builder.Property(x => x.TurnTime).HasColumnName(@"TurnTime").HasColumnType("float").IsRequired();
        }
    }

    // Tool
    public class ToolConfiguration : IEntityTypeConfiguration<Tool>
    {
        public void Configure(EntityTypeBuilder<Tool> builder)
        {
            builder.ToTable("Tool", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Tool").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.ParentToolId).HasColumnName(@"ParentToolId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsMainTool).HasColumnName(@"IsMainTool").HasColumnType("bit").IsRequired();
        }
    }

    // ToolFile
    public class ToolFileConfiguration : IEntityTypeConfiguration<ToolFile>
    {
        public void Configure(EntityTypeBuilder<ToolFile> builder)
        {
            builder.ToTable("ToolFile", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_File").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MimeType).HasColumnName(@"MimeType").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetimeoffset").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ToolId).HasColumnName(@"ToolId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ToolFileType).HasColumnName(@"ToolFileType").HasColumnType("int").IsRequired();
            builder.Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.FileHash).HasColumnName(@"FileHash").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.IsArchived).HasColumnName(@"IsArchived").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ArchiveDate).HasColumnName(@"ArchiveDate").HasColumnType("datetimeoffset").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Tool).WithMany(b => b.ToolFiles).HasForeignKey(c => c.ToolId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_File_Tool");
        }
    }

    // UserTools
    public class UserToolConfiguration : IEntityTypeConfiguration<UserTool>
    {
        public void Configure(EntityTypeBuilder<UserTool> builder)
        {
            builder.ToTable("UserTools", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_UserTools").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(256)").IsRequired().IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.ToolId).HasColumnName(@"ToolId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Tool).WithMany(b => b.UserTools).HasForeignKey(c => c.ToolId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserTools_UserTools");
        }
    }


    #endregion

}
// </auto-generated>
